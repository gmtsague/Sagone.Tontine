using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using MeetingEntities.Models;
using Mapster;
using Meeting.Web.Dto;
using FormHelper;

namespace Meeting.web.Controllers.Settings
{
    public class TypeRubriquesController : Controller
    {
        private readonly LabosContext _context;

        private readonly ILogger<TypeRubriquesController> _logger;

        public TypeRubriquesController(ILogger<TypeRubriquesController> logger, LabosContext context)
        {
            _logger = logger;
            _context = context;
        }

        // GET: TypeRubriques
        public async Task<IActionResult> Index()
        {
            ViewData["TitleObj"] = new FormTitle("Catégorie rubrique");

            TypeAdapterConfig<MeetTypeRubrique, TypeRubriqueDto>.NewConfig().MaxDepth(3);

            return _context.MeetTypeRubriques != null ? 
                          View(await _context.MeetTypeRubriques.AsQueryable().ProjectToType<TypeRubriqueDto>().ToListAsync()) :
                           FormResult.CreateErrorResult(UtilityController.RequestedEntityNotFound);/*Problem("Entity set 'LabosContext.MeetTypeRubriques'  is null.")*/;
        }

        // GET: TypeRubriques/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null || _context.MeetTypeRubriques == null)
            {
                return NotFound();
            }

            var meetTypeRubrique = await _context.MeetTypeRubriques
                .FirstOrDefaultAsync(m => m.TyperubId == id);
            if (meetTypeRubrique == null)
            {
                return NotFound();
            }

            return PartialView("Details", meetTypeRubrique.Adapt<TypeRubriqueDto>());
        }

        // GET: TypeRubriques/Create
        public IActionResult Create()
        {
            return PartialView("Create");
        }

        // POST: TypeRubriques/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        [FormValidator]
        public async Task<IActionResult> Create([Bind("TyperubId,Libelle,IsOutcome,Nbmandataire,Montantroute,MontantPerson,Montantpenalite,Code,Candelete,Maxsignature,AutoGenerated,Required,IsActive,Numordre")] MeetTypeRubrique meetTypeRubrique)
        {
            if (ModelState.IsValid)
            {
                _context.Add(meetTypeRubrique);
                await _context.SaveChangesAsync();
                //return RedirectToAction(nameof(Index));
                return FormResult.CreateSuccessResult(UtilityController.SuccessOperation, Url.Action(nameof(Index)));
            }
            return PartialView("Create", meetTypeRubrique);
        }

        // GET: TypeRubriques/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null || _context.MeetTypeRubriques == null)
            {
                return NotFound();
            }

            var meetTypeRubrique = await _context.MeetTypeRubriques.FindAsync(id);
            if (meetTypeRubrique == null)
            {
                return NotFound();
            }
            return PartialView("Edit", meetTypeRubrique.Adapt<TypeRubriqueDto>());
        }

        // POST: TypeRubriques/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        [FormValidator]
        public async Task<IActionResult> Edit(int id, [Bind("TyperubId,Libelle,IsOutcome,Nbmandataire,Montantroute,MontantPerson,Montantpenalite,Code,Candelete,Maxsignature,AutoGenerated,Required,IsActive,Numordre")] TypeRubriqueDto valueDto)
        {
            if (id != valueDto.TyperubId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                var meetTypeRubrique = valueDto.ToEntity();
                try
                {
                    _context.Update(meetTypeRubrique);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!MeetTypeRubriqueExists(meetTypeRubrique.TyperubId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                // return RedirectToAction(nameof(Index));
                return FormResult.CreateSuccessResult(UtilityController.SuccessOperation, Url.Action(nameof(Index)));
            }
            return PartialView("Edit",valueDto);
        }

        // GET: TypeRubriques/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null || _context.MeetTypeRubriques == null)
            {
                return NotFound();
            }

            var meetTypeRubrique = await _context.MeetTypeRubriques
                .FirstOrDefaultAsync(m => m.TyperubId == id);
            if (meetTypeRubrique == null)
            {
                return NotFound();
            }

            return PartialView("Delete",meetTypeRubrique.Adapt<TypeRubriqueDto>());
        }

        // POST: TypeRubriques/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        [FormValidator]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            if (_context.MeetTypeRubriques == null)
            {
                //return Problem("Entity set 'LabosContext.MeetTypeRubriques'  is null.");
                return FormResult.CreateErrorResult(UtilityController.DeleteOperationFailed);
            }
            var meetTypeRubrique = await _context.MeetTypeRubriques.FindAsync(id);
            if (meetTypeRubrique != null)
            {
                _context.MeetTypeRubriques.Remove(meetTypeRubrique);
            }
            
            await _context.SaveChangesAsync();
            //return RedirectToAction(nameof(Index));
            return FormResult.CreateSuccessResult(UtilityController.SuccessOperation, Url.Action(nameof(Index)));
        }

        private bool MeetTypeRubriqueExists(int id)
        {
          return (_context.MeetTypeRubriques?.Any(e => e.TyperubId == id)).GetValueOrDefault();
        }
    }
}
